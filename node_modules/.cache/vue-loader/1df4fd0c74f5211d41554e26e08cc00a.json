{"remainingRequest":"C:\\Users\\Galib\\portfolio_backup\\Portfolio\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Galib\\portfolio_backup\\Portfolio\\src\\components\\Me.vue?vue&type=template&id=c1e9f592&","dependencies":[{"path":"C:\\Users\\Galib\\portfolio_backup\\Portfolio\\src\\components\\Me.vue","mtime":1600668108680},{"path":"C:\\Users\\Galib\\portfolio_backup\\Portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Galib\\portfolio_backup\\Portfolio\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Galib\\portfolio_backup\\Portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Galib\\portfolio_backup\\Portfolio\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPHYtY29udGFpbmVyIGZsdWlkPgogIDx2LXBhcmFsbGF4CiAgICBkYXJrCiAgICBzcmM9IkAvYXNzZXRzL0RldmVsb3Blci5qcGciCiAgICBpZD0iZGF0YWhvbGRlciIKICA+CiAgICA8di1yb3cKICAgICAgYWxpZ249ImNlbnRlciIKICAgICAganVzdGlmeT0iY2VudGVyIgogICAgPgogICAgICA8di1jb2wgY2xhc3M9InRleHQtY2VudGVyIiBjb2xzPSIxMiI+CiAgICAgICAgPGgxIGNsYXNzPSJkaXNwbGF5LTEgZm9udC13ZWlnaHQtYm9sZCBtYi00Ij5GdWxsIFN0YWNrIERldmVsb3BlciAmIFVJL1VYIERlc2lnbmVyPC9oMT4KICAgICAgICA8aDQgY2xhc3M9InN1YmhlYWRpbmciPkkgZGV2ZWxvcCBhbmQgZGVzaWduIGJlYXV0aWZ1bCB0aGluZ3MsIGFuZCBJIGxvdmUgd2hhdCBJIGRvLjwvaDQ+CiAgICAgIDwvdi1jb2w+CiAgICA8L3Ytcm93PgogIDwvdi1wYXJhbGxheD4KCiAgPGJyLz4KICAgIDx2LXJvdwogICAgICBhbGlnbj0iY2VudGVyIgogICAgICBqdXN0aWZ5PSJjZW50ZXIiCiAgICA+CiAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjEyIj4KICAgICAgICA8aDEgY2xhc3M9ImRpc3BsYXktMSBmb250LXdlaWdodC1ib2xkIG1iLTQiPkFCT1VUIE1FPC9oMT4KICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjIiPjwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9InRleHQtY2VudGVyIiBjb2xzPSI4Ij4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InN1YmhlYWRpbmcgZm9udC13ZWlnaHQtdGhpbiI+IkEgbW90aXZhdGVkIGFuZCBlbnRodXNpYXN0aWMgcHJvZmVzc2lvbmFsIHdpdGggYSBNYXN0ZXIgRGVncmVlIGluIEluZm9ybWF0aW9uIGFuZCBDb21tdW5pY2F0aW9uIFRlY2hub2xvZ3kgaGF2aW5nIDUgeWVhcnMgb2Ygd29yayBleHBlcmllbmNlcyBpbiByZWxldmFudCBmaWVsZCBzZWVraW5nIGZvciBhIHBvc2l0aW9uIHRvIHV0aWxpc2UgbXkgc2tpbGxzLCBwYXJ0aWN1bGFybHkgaW4gdGhlIGFyZWEgb2Ygd2ViIGRldmVsb3BtZW50LiBTdHJvbmcgdW5kZXJzdGFuZGluZyBvZiB2YXJpb3VzIHNvZnR3YXJlIHByb2dyYW1taW5nIGxhbmd1YWdlcyBzdWNoIGFzIEphdmFTY3JpcHQsIEVTNiwgVHlwZVNjcmlwdCwgVnVlSlMsIEFuZ3VsYXJKUywgQW5ndWxhcigyKyksIE5vZGVKUywgRXhwcmVzc0pTLCBQSFAsIEhUTUwsIENTUywgSlF1ZXJ5LCBTUUwsIEZpcmViYXNlLCBBV1MsIEF6dXJlICYgR2l0IGV4cGVyaWVuY2VzLiI8L2g0PgogICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIyIj48L3YtY29sPgogICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgPHYtYXZhdGFyIHNpemU9IjY1Ij4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iQC9hc3NldHMvZ3NzLmpwZyI+CiAgICAgICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9InByaW1hcnkiIGxhcmdlIGlkPSJkYXRhaG9sZGVyIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbG9naW4iPkdpdEh1YiBSZXBvc2l0b3J5PC92LWJ0bj4KICAgICAgPC92LWNvbD4KICAgIDwvdi1yb3c+CgogICAgPHYtcm93PgogICAgPHYtY29udGFpbmVyIGZsdWlkPgogICAgICAgIDx2LXJvdz4KICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMiIgbWQ9IjQiPgoKICAgICAgICAgICAgPHYtaG92ZXIKICAgICAgICAgICAgICAgIHYtc2xvdDpkZWZhdWx0PSJ7IGhvdmVyIH0iCiAgICAgICAgICAgICAgICBvcGVuLWRlbGF5PSIyMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtY2FyZCBjb2xvcj0iYmx1ZSIgZGFyayBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiCiAgICAgICAgICAgIGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgRnJvbnQgRW5kIERldmVsb3BlcgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgIkkgbGlrZSB0byBkZXZlbG9wIHVzZXIgaW50ZXJmYWNlLCB2aXN1YWxpc2UgZGF0YSBmb3IgYXBwcywgY3JlYXRlIHByb3RvdHlwZSBhbmQgdGhlbiBwcm9jZWVkIHRvIGZpbmFsIHByb2R1Y3QuIgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtYWN0aW9ucyBjbGFzcz0id2hpdGUganVzdGlmeS1jZW50ZXIiPgogICAgICAgICAgICAgICAgICA8IS0tCiAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoc29jaWFsLCBpKSBpbiBzb2NpYWxzIgogICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpIgogICAgICAgICAgICAgICAgICAgICAgICA6Y29sb3I9InNvY2lhbC5jb2xvciIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IndoaXRlLS10ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbgogICAgICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj57eyBzb2NpYWwuaWNvbiB9fTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+LS0+CiAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGNvbG9yPSJpbmZvIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0id2hpdGUtLXRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIGZhYgogICAgICAgICAgICAgICAgICAgICAgICBpY29uCiAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vYXUubGlua2VkaW4uY29tLyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWxpbmtlZGluPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgIGljb24KICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZ2l0aHViPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9ImN5YW4iCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgIGljb24KICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWZhY2Vib29rPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgPC92LWhvdmVyPgogICAgICAgIDwvdi1jb2w+CgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIiBtZD0iNCI+CiAgICAgICAgICAgIDx2LWhvdmVyCiAgICAgICAgICAgICAgICB2LXNsb3Q6ZGVmYXVsdD0ieyBob3ZlciB9IgogICAgICAgICAgICAgICAgb3Blbi1kZWxheT0iMjAwIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWNhcmQgY29sb3I9InByaW1hcnkiIGRhcmsgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIgogICAgICAgICAgICBjbGFzcz0ibXgtYXV0byI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgIEZ1bGwgU3RhY2sgRGV2ZWxvcGVyCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICJJIGxpa2UgdG8gY29kZSBmb3IgYmFja2VuZCBzZXJ2aWNlLCBjcmVhdGUgUkVTVCBBUEkgZm9yIHdlYiBhcHBsaWNhdGlvbiwgcHJvY2VzcyBkYXRhIGFuZCBwcm9jZXNzIEFQSSBlbmQgcG9pbnRzLiIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLWFjdGlvbnMgY2xhc3M9IndoaXRlIGp1c3RpZnktY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8IS0tCiAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoc29jaWFsLCBpKSBpbiBzb2NpYWxzIgogICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpIgogICAgICAgICAgICAgICAgICAgICAgICA6Y29sb3I9InNvY2lhbC5jb2xvciIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IndoaXRlLS10ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbgogICAgICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj57eyBzb2NpYWwuaWNvbiB9fTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+LS0+CiAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGNvbG9yPSJpbmZvIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0id2hpdGUtLXRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIGZhYgogICAgICAgICAgICAgICAgICAgICAgICBpY29uCiAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vYXUubGlua2VkaW4uY29tLyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWxpbmtlZGluPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgIGljb24KICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZ2l0aHViPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9ImN5YW4iCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgIGljb24KICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWZhY2Vib29rPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KCiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtaG92ZXIKICAgICAgICAgICAgICAgIHYtc2xvdDpkZWZhdWx0PSJ7IGhvdmVyIH0iCiAgICAgICAgICAgICAgICBvcGVuLWRlbGF5PSIyMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtY2FyZCBjb2xvcj0iY3lhbiIgZGFyayBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiCiAgICAgICAgICAgIGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgVUkvVVggRGVzaWduZXIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgIkkgbGlrZSBjcmVhdGl2aXR5LCBjbGVhbiBkZXNpZ24gc3RydWN0dXJlcywgcHJvcGVyIGRlc2lnbiBjb250ZW50cywgdGhvdWdodGZ1bCBhbmQgbWVhbmluZ2Z1bCBpbnRlcmFjdGlvbnMuIgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtYWN0aW9ucyBjbGFzcz0id2hpdGUganVzdGlmeS1jZW50ZXIiPgogICAgICAgICAgICAgICAgICA8IS0tCiAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoc29jaWFsLCBpKSBpbiBzb2NpYWxzIgogICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpIgogICAgICAgICAgICAgICAgICAgICAgICA6Y29sb3I9InNvY2lhbC5jb2xvciIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IndoaXRlLS10ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbgogICAgICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj57eyBzb2NpYWwuaWNvbiB9fTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+LS0+CiAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGNvbG9yPSJpbmZvIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0id2hpdGUtLXRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIGZhYgogICAgICAgICAgICAgICAgICAgICAgICBpY29uCiAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vYXUubGlua2VkaW4uY29tLyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWxpbmtlZGluPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgIGljb24KICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZ2l0aHViPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9ImN5YW4iCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgIGljb24KICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWZhY2Vib29rPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8L3Ytcm93PgogICAgPC92LWNvbnRhaW5lcj4KICAgIDwvdi1yb3c+CgogICAgPGJyLz4KICAgIDx2LXJvdwogICAgICBhbGlnbj0iY2VudGVyIgogICAgICBqdXN0aWZ5PSJjZW50ZXIiCiAgICA+CiAgICA8di1jb2wgY2xhc3M9InRleHQtY2VudGVyIiBjb2xzPSIxMiI+CiAgICAgICAgPGgxIGNsYXNzPSJkaXNwbGF5LTEgZm9udC13ZWlnaHQtYm9sZCBtYi00Ij5TT0ZUV0FSRSBTS0lMTFM8L2gxPgogICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMiI+PC92LWNvbD4KICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjgiPgogICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ic3ViaGVhZGluZyBmb250LXdlaWdodC10aGluIj5WdWVKUywgQW5ndWxhckpTLCBBbmd1bGFyKDIrKSwgSmF2YVNjcmlwdCwgRVM2LCBUeXBlU2NyaXB0LCBOb2RlSlMsIEV4cHJlc3NKUywgUEhQLCBTUUwsICBKUXVlcnksIEhUTUwsIENTUywgQm9vdHN0cmFwLCBTQVNTLCBBamF4LCAsIEphdmEsIFIgU2hpbnksIEJhc2ggU2hlbGwgU2NyaXB0LjwvaDQ+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjIiPjwvdi1jb2w+CiAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgIDwvdi1jb2w+CiAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjEyIj4KICAgICAgICA8aDEgY2xhc3M9ImRpc3BsYXktMSBmb250LXdlaWdodC1ib2xkIG1iLTQiPlRFQ0hOSUNBTCBBRERJVElPTkFMIFNLSUxMUzwvaDE+CiAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIyIj48L3YtY29sPgogICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJ0ZXh0LWNlbnRlciIgY29scz0iOCI+CiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJzdWJoZWFkaW5nIGZvbnQtd2VpZ2h0LXRoaW4iPkFXUywgTWljcm9zb2Z0IEF6dXJlLCBGaXJlYmFzZShBdXRoLCBGaXJlc3RvcmUsIFJlYWwtVGltZSBEQiwgQ2xvdWQgRnVuY3Rpb25zKSwgR2l0KEdpdEh1YiwgQml0YnVja2V0LCBHaXRMYWIpLCBTb3VyY2VUcmVlLCBNb25nREIsIEhpZ2hDaGFydHMsIENoYXJ0SlMsIFVuaXR5M0QsIFZTIENvZGUsIERvY2tlciwgSmlyYSwgQ29uZmx1ZW5jZSwgVGFibGVhdSwgTGludXgsIE1hYyBPU1gsIFdpbmRvd3MuPC9oND4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMiI+PC92LWNvbD4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgPC92LWNvbD4KICAgIDwvdi1yb3c+CgogICAgPGJyLz4KCiAgICA8di1yb3cgY2xhc3M9IndvcmsiPgogICAgPHYtY29udGFpbmVyIGZsdWlkPgogICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjEyIj4KICAgICAgICA8aDEgY2xhc3M9ImRpc3BsYXktMSBmb250LXdlaWdodC1ib2xkIG1iLTQiPlNvbWUgUmVjZW50IFdvcmtzPC9oMT4KICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMiI+PC92LWNvbD4KICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjgiPgogICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ic3ViaGVhZGluZyBmb250LXdlaWdodC10aGluIj5IZXJlIGFyZSBhIGZldyB3ZWIgYXBwcyBhbmQgd2Vic2l0ZXMgSSd2ZSB3b3JrZWQgb24gcmVjZW50bHkuPC9oND4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMiI+PC92LWNvbD4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICA8L3YtY29sPgogICAgICAgIDx2LXJvdz4KICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICA8di1ob3ZlcgogICAgICAgICAgICAgICAgdi1zbG90OmRlZmF1bHQ9InsgaG92ZXIgfSIKICAgICAgICAgICAgICAgIG9wZW4tZGVsYXk9IjIwMCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1jYXJkIGNvbG9yPSJ3aGl0ZSIgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIgogICAgICAgICAgICBjbGFzcz0ibXgtYXV0byI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgIEFzcGlyYW50ZSBGb3VuZGF0aW9uCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSI+CiAgICAgICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2Vic2l0ZSIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgdi1pZj0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggdHJhbnNpdGlvbi1mYXN0LWluLWZhc3Qtb3V0IGxpbWUgYWNjZW50LTQgdi1jYXJkLS1yZXZlYWwgZGlzcGxheS0zIHdoaXRlLS10ZXh0IgogICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBib3JkZXItcmFkaXVzOiAyMHB4OyIKICAgICAgICAgID4KICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9IiMzRjUxQjUiIGlkPSJkYXRhaG9sZGVyIiBsYXJnZSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbG9naW4iID5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KCiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtaG92ZXIKICAgICAgICAgICAgICAgIHYtc2xvdDpkZWZhdWx0PSJ7IGhvdmVyIH0iCiAgICAgICAgICAgICAgICBvcGVuLWRlbGF5PSIyMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtY2FyZCBjb2xvcj0id2hpdGUiIGlkPSJkYXRhaG9sZGVyIgogICAgICAgICAgICA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIKICAgICAgICAgICAgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICBEaWdpdGFsIEh1YiBBdXN0cmFsaWEKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIj4KICAgICAgICAgICAgICAgICJEZXZlbG9waW5nIHdlYnNpdGUiCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIHYtaWY9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0iZC1mbGV4IHRyYW5zaXRpb24tZmFzdC1pbi1mYXN0LW91dCBsaW1lIGFjY2VudC00IHYtY2FyZC0tcmV2ZWFsIGRpc3BsYXktMyB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMTAwJTsgYm9yZGVyLXJhZGl1czogMjBweDsiCiAgICAgICAgICA+CiAgICAgICAgICA8di1idG4gY2xhc3M9Im1hLTIiIG91dGxpbmVkIGNvbG9yPSIjM0Y1MUI1IiBpZD0iZGF0YWhvbGRlciIgbGFyZ2UgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luIj5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1ob3Zlcj4KICAgICAgICA8L3YtY29sPgoKICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICA8di1ob3ZlcgogICAgICAgICAgICAgICAgdi1zbG90OmRlZmF1bHQ9InsgaG92ZXIgfSIKICAgICAgICAgICAgICAgIG9wZW4tZGVsYXk9IjIwMCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1jYXJkIGNvbG9yPSJ3aGl0ZSIgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIgogICAgICAgICAgICBjbGFzcz0ibXgtYXV0byI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgIE15SW50ZXJhY3QgRGVza3RvcAogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2ViIGFwcCIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgdi1pZj0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggdHJhbnNpdGlvbi1mYXN0LWluLWZhc3Qtb3V0IGxpbWUgYWNjZW50LTQgdi1jYXJkLS1yZXZlYWwgZGlzcGxheS0zIHdoaXRlLS10ZXh0IgogICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBib3JkZXItcmFkaXVzOiAyMHB4OyIKICAgICAgICAgID4KICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9IiMzRjUxQjUiIGlkPSJkYXRhaG9sZGVyIiBsYXJnZSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbG9naW4iPlZpc2l0IFdlYnNpdGU8L3YtYnRuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC92LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgPC92LWhvdmVyPgogICAgICAgIDwvdi1jb2w+CgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIiBtZD0iNCI+CiAgICAgICAgICAgIDx2LWhvdmVyCiAgICAgICAgICAgICAgICB2LXNsb3Q6ZGVmYXVsdD0ieyBob3ZlciB9IgogICAgICAgICAgICAgICAgb3Blbi1kZWxheT0iMjAwIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWNhcmQgY29sb3I9IndoaXRlIiBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiCiAgICAgICAgICAgIGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgVEFMIFByaWNpbmcgRWZmaWNpZW5jeQogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgICAgICJEZXZlbG9waW5nIHdlYiBhcHAiCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIHYtaWY9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0iZC1mbGV4IHRyYW5zaXRpb24tZmFzdC1pbi1mYXN0LW91dCBsaW1lIGFjY2VudC00IHYtY2FyZC0tcmV2ZWFsIGRpc3BsYXktMyB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMTAwJTsgYm9yZGVyLXJhZGl1czogMjBweDsiCiAgICAgICAgICA+CiAgICAgICAgICA8di1idG4gY2xhc3M9Im1hLTIiIG91dGxpbmVkIGNvbG9yPSIjM0Y1MUI1IiBpZD0iZGF0YWhvbGRlciIgbGFyZ2UgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luIj5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KCiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtaG92ZXIKICAgICAgICAgICAgICAgIHYtc2xvdDpkZWZhdWx0PSJ7IGhvdmVyIH0iCiAgICAgICAgICAgICAgICBvcGVuLWRlbGF5PSIyMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtY2FyZCBjb2xvcj0id2hpdGUiIGlkPSJkYXRhaG9sZGVyIgogICAgICAgICAgICA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIKICAgICAgICAgICAgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICBGaXJzdCBTdGF0ZSBTdXBlcgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2ViIGFwcCIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgdi1pZj0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggdHJhbnNpdGlvbi1mYXN0LWluLWZhc3Qtb3V0IGxpbWUgYWNjZW50LTQgdi1jYXJkLS1yZXZlYWwgZGlzcGxheS0zIHdoaXRlLS10ZXh0IgogICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBib3JkZXItcmFkaXVzOiAyMHB4OyIKICAgICAgICAgID4KICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9IiMzRjUxQjUiIGlkPSJkYXRhaG9sZGVyIiBsYXJnZSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbG9naW4iPlZpc2l0IFdlYnNpdGU8L3YtYnRuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC92LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgPC92LWhvdmVyPgogICAgICAgIDwvdi1jb2w+CgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIiBtZD0iNCI+CiAgICAgICAgICAgIDx2LWhvdmVyCiAgICAgICAgICAgICAgICB2LXNsb3Q6ZGVmYXVsdD0ieyBob3ZlciB9IgogICAgICAgICAgICAgICAgb3Blbi1kZWxheT0iMjAwIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWNhcmQgY29sb3I9IndoaXRlIiBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiCiAgICAgICAgICAgIGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgRW50ZXBvb2wgZm9yIFJNUwogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2ViIGFwcCIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgPHYtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIHYtaWY9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0iZC1mbGV4IHRyYW5zaXRpb24tZmFzdC1pbi1mYXN0LW91dCBsaW1lIGFjY2VudC00IHYtY2FyZC0tcmV2ZWFsIGRpc3BsYXktMyB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMTAwJTsgYm9yZGVyLXJhZGl1czogMjBweDsiCiAgICAgICAgICA+CiAgICAgICAgICA8di1idG4gY2xhc3M9Im1hLTIiIG91dGxpbmVkIGNvbG9yPSIjM0Y1MUI1IiBpZD0iZGF0YWhvbGRlciIgbGFyZ2UgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luIj5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1ob3Zlcj4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwvdi1yb3c+CiAgICA8L3YtY29udGFpbmVyPgogICAgPC92LXJvdz4KCjwhLS0KICAgIDx2LXJvdyBjbGFzcz0id29yayI+CiAgICA8di1jb250YWluZXIgZmx1aWQ+CiAgICAgICAgPHYtY29sIGNsYXNzPSJ0ZXh0LWNlbnRlciIgY29scz0iMTIiPgogICAgICAgIDxoMSBjbGFzcz0iZGlzcGxheS0xIGZvbnQtd2VpZ2h0LWJvbGQgbWItNCI+U29tZSBSZWNlbnQgV29ya3M8L2gxPgogICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIyIj48L3YtY29sPgogICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJ0ZXh0LWNlbnRlciIgY29scz0iOCI+CiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJzdWJoZWFkaW5nIGZvbnQtd2VpZ2h0LXRoaW4iPkhlcmUgYXJlIGEgZmV3IHdlYiBhcHBzIGFuZCB3ZWJzaXRlcyBJJ3ZlIHdvcmtlZCBvbiByZWNlbnRseS48L2g0PgogICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIyIj48L3YtY29sPgogICAgICAgICAgICA8L3Ytcm93PgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgPHYtcm93PgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIiBtZD0iNCI+CiAgICAgICAgICAgIDx2LWhvdmVyCiAgICAgICAgICAgICAgICB2LXNsb3Q6ZGVmYXVsdD0ieyBob3ZlciB9IgogICAgICAgICAgICAgICAgb3Blbi1kZWxheT0iMjAwIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWNhcmQgY29sb3I9IndoaXRlIiBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiCiAgICAgICAgICAgIGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgQXNwaXJhbnRlIEZvdW5kYXRpb24KICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIj4KICAgICAgICAgICAgICAgICAgICAiRGV2ZWxvcGluZyB3ZWJzaXRlIgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgPGRpdgogICAgICAgICAgICB2LWlmPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9ImQtZmxleCB0cmFuc2l0aW9uLWZhc3QtaW4tZmFzdC1vdXQgbGltZSBhY2NlbnQtNCB2LWNhcmQtLXJldmVhbCBkaXNwbGF5LTMgd2hpdGUtLXRleHQiCiAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDEwMCU7IGJvcmRlci1yYWRpdXM6IDIwcHg7IgogICAgICAgICAgPgogICAgICAgICAgPHYtYnRuIGNsYXNzPSJtYS0yIiBvdXRsaW5lZCBjb2xvcj0iIzNGNTFCNSIgaWQ9ImRhdGFob2xkZXIiIGxhcmdlIGhyZWY9Imh0dHBzOi8vd3d3LmFzcGlyYW50ZWZvdW5kYXRpb24ub3JnIiB0YXJnZXQ9Il9ibGFuayI+VmlzaXQgV2Vic2l0ZTwvdi1idG4+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3YtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgPC92LWhvdmVyPgogICAgICAgIDwvdi1jb2w+CgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIiBtZD0iNCI+CiAgICAgICAgICAgIDx2LWhvdmVyCiAgICAgICAgICAgICAgICB2LXNsb3Q6ZGVmYXVsdD0ieyBob3ZlciB9IgogICAgICAgICAgICAgICAgb3Blbi1kZWxheT0iMjAwIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWNhcmQgY29sb3I9IndoaXRlIiBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiCiAgICAgICAgICAgIGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgRGlnaXRhbCBIdWIgQXVzdHJhbGlhCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSI+CiAgICAgICAgICAgICAgICAiRGV2ZWxvcGluZyB3ZWJzaXRlIgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgPGRpdgogICAgICAgICAgICB2LWlmPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9ImQtZmxleCB0cmFuc2l0aW9uLWZhc3QtaW4tZmFzdC1vdXQgbGltZSBhY2NlbnQtNCB2LWNhcmQtLXJldmVhbCBkaXNwbGF5LTMgd2hpdGUtLXRleHQiCiAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDEwMCU7IGJvcmRlci1yYWRpdXM6IDIwcHg7IgogICAgICAgICAgPgogICAgICAgICAgPHYtYnRuIGNsYXNzPSJtYS0yIiBvdXRsaW5lZCBjb2xvcj0iIzNGNTFCNSIgaWQ9ImRhdGFob2xkZXIiIGxhcmdlIGhyZWY9Imh0dHBzOi8vZGlnaXRhbGh1YmF1c3RyYWxpYS5jb20uYXUiIHRhcmdldD0iX2JsYW5rIj5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1ob3Zlcj4KICAgICAgICA8L3YtY29sPgoKICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICA8di1ob3ZlcgogICAgICAgICAgICAgICAgdi1zbG90OmRlZmF1bHQ9InsgaG92ZXIgfSIKICAgICAgICAgICAgICAgIG9wZW4tZGVsYXk9IjIwMCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1jYXJkIGNvbG9yPSJ3aGl0ZSIgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIgogICAgICAgICAgICBjbGFzcz0ibXgtYXV0byI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgIE15SW50ZXJhY3QgRGVza3RvcAogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2ViIGFwcCIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgdi1pZj0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggdHJhbnNpdGlvbi1mYXN0LWluLWZhc3Qtb3V0IGxpbWUgYWNjZW50LTQgdi1jYXJkLS1yZXZlYWwgZGlzcGxheS0zIHdoaXRlLS10ZXh0IgogICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBib3JkZXItcmFkaXVzOiAyMHB4OyIKICAgICAgICAgID4KICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9IiMzRjUxQjUiIGlkPSJkYXRhaG9sZGVyIiBsYXJnZSBocmVmPSJodHRwczovL215LmludGVyYWN0LnRlY2hub2xvZ3kvaW50ZXJhY3QvIy9sb2dpbiIgdGFyZ2V0PSJfYmxhbmsiPlZpc2l0IFdlYnNpdGU8L3YtYnRuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC92LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgPC92LWhvdmVyPgogICAgICAgIDwvdi1jb2w+CgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIiBtZD0iNCI+CiAgICAgICAgICAgIDx2LWhvdmVyCiAgICAgICAgICAgICAgICB2LXNsb3Q6ZGVmYXVsdD0ieyBob3ZlciB9IgogICAgICAgICAgICAgICAgb3Blbi1kZWxheT0iMjAwIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWNhcmQgY29sb3I9IndoaXRlIiBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiCiAgICAgICAgICAgIGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgVEFMIFByaWNpbmcgRWZmaWNpZW5jeQogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgICAgICJEZXZlbG9waW5nIHdlYiBhcHAiCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIHYtaWY9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0iZC1mbGV4IHRyYW5zaXRpb24tZmFzdC1pbi1mYXN0LW91dCBsaW1lIGFjY2VudC00IHYtY2FyZC0tcmV2ZWFsIGRpc3BsYXktMyB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMTAwJTsgYm9yZGVyLXJhZGl1czogMjBweDsiCiAgICAgICAgICA+CiAgICAgICAgICA8di1idG4gY2xhc3M9Im1hLTIiIG91dGxpbmVkIGNvbG9yPSIjM0Y1MUI1IiBpZD0iZGF0YWhvbGRlciIgbGFyZ2UgaHJlZj0iaHR0cDovL2xvY2FsaG9zdDo4MDgxLyIgdGFyZ2V0PSJfYmxhbmsiPlZpc2l0IFdlYnNpdGU8L3YtYnRuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC92LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1ob3Zlcj4KICAgICAgICA8L3YtY29sPgoKICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICA8di1ob3ZlcgogICAgICAgICAgICAgICAgdi1zbG90OmRlZmF1bHQ9InsgaG92ZXIgfSIKICAgICAgICAgICAgICAgIG9wZW4tZGVsYXk9IjIwMCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1jYXJkIGNvbG9yPSJ3aGl0ZSIgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIgogICAgICAgICAgICBjbGFzcz0ibXgtYXV0byI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgIEZpcnN0IFN0YXRlIFN1cGVyCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSI+CiAgICAgICAgICAgICAgICAiRGV2ZWxvcGluZyB3ZWIgYXBwIgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgPGRpdgogICAgICAgICAgICB2LWlmPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9ImQtZmxleCB0cmFuc2l0aW9uLWZhc3QtaW4tZmFzdC1vdXQgbGltZSBhY2NlbnQtNCB2LWNhcmQtLXJldmVhbCBkaXNwbGF5LTMgd2hpdGUtLXRleHQiCiAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDEwMCU7IGJvcmRlci1yYWRpdXM6IDIwcHg7IgogICAgICAgICAgPgogICAgICAgICAgPHYtYnRuIGNsYXNzPSJtYS0yIiBvdXRsaW5lZCBjb2xvcj0iIzNGNTFCNSIgaWQ9ImRhdGFob2xkZXIiIGxhcmdlIGhyZWY9Imh0dHA6Ly9pbnRlcmFjdGlvbmFuaW1hdGlvbi5zMy13ZWJzaXRlLWFwLXNvdXRoZWFzdC0yLmFtYXpvbmF3cy5jb20vIiB0YXJnZXQ9Il9ibGFuayI+VmlzaXQgV2Vic2l0ZTwvdi1idG4+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3YtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KCiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtaG92ZXIKICAgICAgICAgICAgICAgIHYtc2xvdDpkZWZhdWx0PSJ7IGhvdmVyIH0iCiAgICAgICAgICAgICAgICBvcGVuLWRlbGF5PSIyMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtY2FyZCBjb2xvcj0id2hpdGUiIGlkPSJkYXRhaG9sZGVyIgogICAgICAgICAgICA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIKICAgICAgICAgICAgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICBFbnRlcG9vbCBmb3IgUk1TCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSI+CiAgICAgICAgICAgICAgICAiRGV2ZWxvcGluZyB3ZWIgYXBwIgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICA8di1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgdi1pZj0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggdHJhbnNpdGlvbi1mYXN0LWluLWZhc3Qtb3V0IGxpbWUgYWNjZW50LTQgdi1jYXJkLS1yZXZlYWwgZGlzcGxheS0zIHdoaXRlLS10ZXh0IgogICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBib3JkZXItcmFkaXVzOiAyMHB4OyIKICAgICAgICAgID4KICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9IiMzRjUxQjUiIGlkPSJkYXRhaG9sZGVyIiBsYXJnZSBocmVmPSJodHRwczovL3d3dy51YmVyLmJpeiIgdGFyZ2V0PSJfYmxhbmsiPlZpc2l0IFdlYnNpdGU8L3YtYnRuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC92LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgPC92LWhvdmVyPgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgPC92LXJvdz4KICAgIDwvdi1jb250YWluZXI+CiAgICA8L3Ytcm93Pi0tPgoKICAgIDxici8+CgogICAgPHYtcm93PgogICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjEyIj4KICAgICAgICA8aDEgY2xhc3M9ImRpc3BsYXktMSBmb250LXdlaWdodC1ib2xkIG1iLTQiPkVEVUNBVElPTiAmIENBUkVFUjwvaDE+CiAgICA8di10aW1lbGluZT4KICAgIDx2LXRpbWVsaW5lLWl0ZW0KICAgICAgdi1mb3I9Iih5ZWFyLCBpKSBpbiB5ZWFycyIKICAgICAgOmtleT0iaSIKICAgICAgOmNvbG9yPSJ5ZWFyLmNvbG9yIgogICAgICBzbWFsbAogICAgPgogICAgICA8dGVtcGxhdGUgdi1zbG90Om9wcG9zaXRlPgogICAgICAgIDxzcGFuCiAgICAgICAgICA6Y2xhc3M9ImBoZWFkbGluZSBmb250LXdlaWdodC1ib2xkICR7eWVhci5jb2xvcn0tLXRleHRgIgogICAgICAgICAgdi10ZXh0PSJ5ZWFyLnllYXIiCiAgICAgICAgPjwvc3Bhbj4KICAgICAgPC90ZW1wbGF0ZT4KICAgICAgPGRpdiBjbGFzcz0icHktNCI+CiAgICAgICAgPGgyIDpjbGFzcz0iYGhlYWRsaW5lIGZvbnQtd2VpZ2h0LWxpZ2h0IG1iLTQgJHt5ZWFyLmNvbG9yfS0tdGV4dGAiPnt7eWVhci5uYW1lfX08L2gyPgogICAgICAgIDxkaXY+CiAgICAgICAgICB7e3llYXIuZGVzY3JpcHRpb259fQogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvdi10aW1lbGluZS1pdGVtPgogIDwvdi10aW1lbGluZT4KPC92LWNvbD4KICA8L3Ytcm93PgoKICA8YnIvPgoKICA8di1yb3cgY2xhc3M9ImdvYWwiPgogICAgPHYtY29udGFpbmVyIGZsdWlkPgogICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjEyIj4KICAgICAgICA8aDEgY2xhc3M9ImRpc3BsYXktMSBmb250LXdlaWdodC1ib2xkIG1iLTQiPkNBUkVFUiBHT0FMPC9oMT4KICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMiI+PC92LWNvbD4KICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjgiPgogICAgICAgICAgICAgICAgPHYtc3RlcHBlciB2LW1vZGVsPSJlMSIgaWQ9ImRhdGFob2xkZXIiPgogICAgICAgICAgICAgICAgPHYtc3RlcHBlci1oZWFkZXI+CiAgICAgICAgICAgICAgICAgIDx2LXN0ZXBwZXItc3RlcCA6Y29tcGxldGU9ImUxID4gMSIgc3RlcD0iMSI+TGVhcm4gTmV3IFRlY2hub2xvZ3k8L3Ytc3RlcHBlci1zdGVwPgoKICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4KCiAgICAgICAgICAgICAgICAgIDx2LXN0ZXBwZXItc3RlcCA6Y29tcGxldGU9ImUxID4gMiIgc3RlcD0iMiI+QmVjb21lIFNlbmlvciBEZXZlbG9wZXI8L3Ytc3RlcHBlci1zdGVwPgoKICAgICAgICAgICAgICAgIDwvdi1zdGVwcGVyLWhlYWRlcj4KCiAgICAgICAgICAgICAgICA8di1zdGVwcGVyLWl0ZW1zPgogICAgICAgICAgICAgICAgICA8di1zdGVwcGVyLWNvbnRlbnQgc3RlcD0iMSI+CiAgICAgICAgICAgICAgICAgICAgPHYtY2FyZAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1iLTEyIgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImluZm8iCiAgICAgICAgICAgICAgICAgICAgICBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgIExlYXJuIE1vZGVybiBUZWNobm9sb2d5CiAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgICAgIkkgYW0gdmVyeSBrZWVuIGFuZCBlbnRodXNpYXN0aWMgdG8gbGVhcm4gbmV3IHRoaW5ncy4iCiAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZD4KCiAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0ibGltZSBhY2NlbnQtNCIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZTEgPSAyIgogICAgICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIENvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgPC92LXN0ZXBwZXItY29udGVudD4KCiAgICAgICAgICAgICAgICAgIDx2LXN0ZXBwZXItY29udGVudCBzdGVwPSIyIj4KICAgICAgICAgICAgICAgICAgICA8di1jYXJkCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWItMTIiCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0iY3lhbiIKICAgICAgICAgICAgICAgICAgICAgIGlkPSJkYXRhaG9sZGVyIgogICAgICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgICAgQmVjb21lIFNlbmlvciBEZXZlbG9wZXIKICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAiSSB3YW50IHRvIGJlY29tZSBhIHN1Y2Nlc3NmdWwgU2VuaW9yIERldmVsb3Blci4iCiAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZD4KCiAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0ibGltZSBhY2NlbnQtNCIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZTEgPSAzIgogICAgICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIENvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgPC92LXN0ZXBwZXItY29udGVudD4KCiAgICAgICAgICAgICAgICAgIDx2LXN0ZXBwZXItY29udGVudCBzdGVwPSIzIj4KICAgICAgICAgICAgICAgICAgICA8di1jYXJkCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWItMTIiCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgIEtlZXAgQ29udGludWluZyBMZWFybmluZwogICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgICJJIHdhbnQgdG8ga2VlcCBjb250aW51aW5nIG15IGxlYXJuaW5nIHByb2Nlc3MuIgogICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+CgogICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImxpbWUgYWNjZW50LTQiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImUxID0gMSIKICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBDb250aW51ZQogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgIDwvdi1zdGVwcGVyLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICA8L3Ytc3RlcHBlci1pdGVtcz4KICAgICAgICAgICAgICA8L3Ytc3RlcHBlcj4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMiI+PC92LWNvbD4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICA8L3YtY29sPgogICAgPC92LWNvbnRhaW5lcj4KICA8L3Ytcm93PgoKICA8di1mYWItdHJhbnNpdGlvbj4KICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgdi1zY3JvbGw9Im9uU2Nyb2xsIgogICAgICAgICAgICB2LXNob3c9ImZhYiIKICAgICAgICAgICAgZmFiCiAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgZml4ZWQKICAgICAgICAgICAgYm90dG9tCiAgICAgICAgICAgIHJpZ2h0CiAgICAgICAgICAgIGNvbG9yPSJsaW1lIGFjY2VudC00IgogICAgICAgICAgICBAY2xpY2s9InRvVG9wIgogICAgICAgICAgICBjbGFzcz0idHJhbnNwYXJlbnQiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWljb24+a2V5Ym9hcmRfYXJyb3dfdXA8L3YtaWNvbj4KICAgICAgICAgIDwvdi1idG4+CiAgICA8L3YtZmFiLXRyYW5zaXRpb24+Cjwvdi1jb250YWluZXI+Cg=="},null]}