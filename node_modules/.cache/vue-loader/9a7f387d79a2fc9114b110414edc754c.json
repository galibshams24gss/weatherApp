{"remainingRequest":"C:\\Users\\Galib\\Weather_app\\weather_app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Galib\\Weather_app\\weather_app\\src\\components\\Me.vue?vue&type=template&id=122fb3c8&","dependencies":[{"path":"C:\\Users\\Galib\\Weather_app\\weather_app\\src\\components\\Me.vue","mtime":1613232902115},{"path":"C:\\Users\\Galib\\Weather_app\\weather_app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Galib\\Weather_app\\weather_app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Galib\\Weather_app\\weather_app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Galib\\Weather_app\\weather_app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPHYtY29udGFpbmVyIGZsdWlkPgogICAgPCEtLQogIDx2LXBhcmFsbGF4CiAgICBkYXJrCiAgICBzcmM9IkAvYXNzZXRzL0RldmVsb3Blci5qcGciCiAgICBpZD0iZGF0YWhvbGRlciIKICA+CiAgICA8di1yb3cKICAgICAgYWxpZ249ImNlbnRlciIKICAgICAganVzdGlmeT0iY2VudGVyIgogICAgPgogICAgICA8di1jb2wgY2xhc3M9InRleHQtY2VudGVyIiBjb2xzPSIxMiI+CiAgICAgICAgPGgxIGNsYXNzPSJkaXNwbGF5LTEgZm9udC13ZWlnaHQtYm9sZCBtYi00Ij5GdWxsIFN0YWNrIERldmVsb3BlciAmIFVJL1VYIERlc2lnbmVyPC9oMT4KICAgICAgICA8aDQgY2xhc3M9InN1YmhlYWRpbmciPkkgZGV2ZWxvcCBhbmQgZGVzaWduIGJlYXV0aWZ1bCB0aGluZ3MsIGFuZCBJIGxvdmUgd2hhdCBJIGRvLjwvaDQ+CiAgICAgIDwvdi1jb2w+CiAgICA8L3Ytcm93PgogIDwvdi1wYXJhbGxheD4tLT4KCiAgPGJyLz4KICAgIDx2LXJvdwogICAgICBhbGlnbj0iY2VudGVyIgogICAgICBqdXN0aWZ5PSJjZW50ZXIiCiAgICA+CiAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjEyIj4KICAgICAgICA8aDEgY2xhc3M9ImRpc3BsYXktMSBmb250LXdlaWdodC1ib2xkIG1iLTQiPkFCT1VUIE1FPC9oMT4KICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjIiPjwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9InRleHQtY2VudGVyIiBjb2xzPSI4Ij4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InN1YmhlYWRpbmcgZm9udC13ZWlnaHQtdGhpbiI+IkEgbW90aXZhdGVkIGFuZCBlbnRodXNpYXN0aWMgcHJvZmVzc2lvbmFsIHdpdGggYSBNYXN0ZXIgRGVncmVlIGluIEluZm9ybWF0aW9uIGFuZCBDb21tdW5pY2F0aW9uIFRlY2hub2xvZ3kgaGF2aW5nIDUgeWVhcnMgb2Ygd29yayBleHBlcmllbmNlcyBpbiByZWxldmFudCBmaWVsZCBzZWVraW5nIGZvciBhIHBvc2l0aW9uIHRvIHV0aWxpc2UgbXkgc2tpbGxzLCBwYXJ0aWN1bGFybHkgaW4gdGhlIGFyZWEgb2Ygd2ViIGRldmVsb3BtZW50LiBTdHJvbmcgdW5kZXJzdGFuZGluZyBvZiB2YXJpb3VzIHNvZnR3YXJlIHByb2dyYW1taW5nIGxhbmd1YWdlcyBzdWNoIGFzIEphdmFTY3JpcHQsIEVTNiwgVHlwZVNjcmlwdCwgVnVlSlMsIEFuZ3VsYXJKUywgQW5ndWxhcigyKyksIE5vZGVKUywgRXhwcmVzc0pTLCBQSFAsIEhUTUwsIENTUywgSlF1ZXJ5LCBTUUwsIEZpcmViYXNlLCBBV1MsIEF6dXJlICYgR2l0IGV4cGVyaWVuY2VzLiI8L2g0PgogICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIyIj48L3YtY29sPgogICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICA8IS0tCiAgICAgICAgICAgICAgICA8di1hdmF0YXIgc2l6ZT0iNjUiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJAL2Fzc2V0cy9nc3MuanBnIj4KICAgICAgICAgICAgICAgIDwvdi1hdmF0YXI+LS0+CiAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgPHYtYnRuIGNsYXNzPSJtYS0yIiBvdXRsaW5lZCBjb2xvcj0icHJpbWFyeSIgbGFyZ2UgaWQ9ImRhdGFob2xkZXIiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9sb2dpbiI+R2l0SHViIFJlcG9zaXRvcnk8L3YtYnRuPgogICAgICA8L3YtY29sPgogICAgPC92LXJvdz4KCiAgICA8di1yb3c+CiAgICA8di1jb250YWluZXIgZmx1aWQ+CiAgICAgICAgPHYtcm93PgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIiBtZD0iNCI+CgogICAgICAgICAgICA8di1ob3ZlcgogICAgICAgICAgICAgICAgdi1zbG90OmRlZmF1bHQ9InsgaG92ZXIgfSIKICAgICAgICAgICAgICAgIG9wZW4tZGVsYXk9IjIwMCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1jYXJkIGNvbG9yPSJibHVlIiBkYXJrIGlkPSJkYXRhaG9sZGVyIgogICAgICAgICAgICA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIKICAgICAgICAgICAgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICBGcm9udCBFbmQgRGV2ZWxvcGVyCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAiSSBsaWtlIHRvIGRldmVsb3AgdXNlciBpbnRlcmZhY2UsIHZpc3VhbGlzZSBkYXRhIGZvciBhcHBzLCBjcmVhdGUgcHJvdG90eXBlIGFuZCB0aGVuIHByb2NlZWQgdG8gZmluYWwgcHJvZHVjdC4iCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zIGNsYXNzPSJ3aGl0ZSBqdXN0aWZ5LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDwhLS0KICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9Iihzb2NpYWwsIGkpIGluIHNvY2lhbHMiCiAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImkiCiAgICAgICAgICAgICAgICAgICAgICAgIDpjb2xvcj0ic29jaWFsLmNvbG9yIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0id2hpdGUtLXRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIGZhYgogICAgICAgICAgICAgICAgICAgICAgICBpY29uCiAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPnt7IHNvY2lhbC5pY29uIH19PC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4tLT4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9ImluZm8iCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgIGljb24KICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9hdS5saW5rZWRpbi5jb20vIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktbGlua2VkaW48L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IndoaXRlLS10ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbgogICAgICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbG9naW4iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1naXRodWI8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0iY3lhbiIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IndoaXRlLS10ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbgogICAgICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZmFjZWJvb2s8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KCiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtaG92ZXIKICAgICAgICAgICAgICAgIHYtc2xvdDpkZWZhdWx0PSJ7IGhvdmVyIH0iCiAgICAgICAgICAgICAgICBvcGVuLWRlbGF5PSIyMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtY2FyZCBjb2xvcj0icHJpbWFyeSIgZGFyayBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiCiAgICAgICAgICAgIGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgRnVsbCBTdGFjayBEZXZlbG9wZXIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgIkkgbGlrZSB0byBjb2RlIGZvciBiYWNrZW5kIHNlcnZpY2UsIGNyZWF0ZSBSRVNUIEFQSSBmb3Igd2ViIGFwcGxpY2F0aW9uLCBwcm9jZXNzIGRhdGEgYW5kIHByb2Nlc3MgQVBJIGVuZCBwb2ludHMuIgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtYWN0aW9ucyBjbGFzcz0id2hpdGUganVzdGlmeS1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDwhLS0KICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9Iihzb2NpYWwsIGkpIGluIHNvY2lhbHMiCiAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImkiCiAgICAgICAgICAgICAgICAgICAgICAgIDpjb2xvcj0ic29jaWFsLmNvbG9yIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0id2hpdGUtLXRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIGZhYgogICAgICAgICAgICAgICAgICAgICAgICBpY29uCiAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPnt7IHNvY2lhbC5pY29uIH19PC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4tLT4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9ImluZm8iCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgIGljb24KICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9hdS5saW5rZWRpbi5jb20vIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktbGlua2VkaW48L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IndoaXRlLS10ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbgogICAgICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbG9naW4iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1naXRodWI8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0iY3lhbiIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IndoaXRlLS10ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbgogICAgICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZmFjZWJvb2s8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1ob3Zlcj4KICAgICAgICA8L3YtY29sPgoKICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICA8di1ob3ZlcgogICAgICAgICAgICAgICAgdi1zbG90OmRlZmF1bHQ9InsgaG92ZXIgfSIKICAgICAgICAgICAgICAgIG9wZW4tZGVsYXk9IjIwMCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1jYXJkIGNvbG9yPSJjeWFuIiBkYXJrIGlkPSJkYXRhaG9sZGVyIgogICAgICAgICAgICA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIKICAgICAgICAgICAgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICBVSS9VWCBEZXNpZ25lcgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAiSSBsaWtlIGNyZWF0aXZpdHksIGNsZWFuIGRlc2lnbiBzdHJ1Y3R1cmVzLCBwcm9wZXIgZGVzaWduIGNvbnRlbnRzLCB0aG91Z2h0ZnVsIGFuZCBtZWFuaW5nZnVsIGludGVyYWN0aW9ucy4iCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zIGNsYXNzPSJ3aGl0ZSBqdXN0aWZ5LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDwhLS0KICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9Iihzb2NpYWwsIGkpIGluIHNvY2lhbHMiCiAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImkiCiAgICAgICAgICAgICAgICAgICAgICAgIDpjb2xvcj0ic29jaWFsLmNvbG9yIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0id2hpdGUtLXRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIGZhYgogICAgICAgICAgICAgICAgICAgICAgICBpY29uCiAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPnt7IHNvY2lhbC5pY29uIH19PC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4tLT4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9ImluZm8iCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgIGljb24KICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9hdS5saW5rZWRpbi5jb20vIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktbGlua2VkaW48L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IndoaXRlLS10ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbgogICAgICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbG9naW4iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1naXRodWI8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0iY3lhbiIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IndoaXRlLS10ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbgogICAgICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZmFjZWJvb2s8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1ob3Zlcj4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwvdi1yb3c+CiAgICA8L3YtY29udGFpbmVyPgogICAgPC92LXJvdz4KCiAgICA8YnIvPgogICAgPHYtcm93CiAgICAgIGFsaWduPSJjZW50ZXIiCiAgICAgIGp1c3RpZnk9ImNlbnRlciIKICAgID4KICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjEyIj4KICAgICAgICA8aDEgY2xhc3M9ImRpc3BsYXktMSBmb250LXdlaWdodC1ib2xkIG1iLTQiPlNPRlRXQVJFIFNLSUxMUzwvaDE+CiAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIyIj48L3YtY29sPgogICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJ0ZXh0LWNlbnRlciIgY29scz0iOCI+CiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJzdWJoZWFkaW5nIGZvbnQtd2VpZ2h0LXRoaW4iPlZ1ZUpTLCBBbmd1bGFySlMsIEFuZ3VsYXIoMispLCBKYXZhU2NyaXB0LCBFUzYsIFR5cGVTY3JpcHQsIE5vZGVKUywgRXhwcmVzc0pTLCBQSFAsIFNRTCwgIEpRdWVyeSwgSFRNTCwgQ1NTLCBCb290c3RyYXAsIFNBU1MsIEFqYXgsICwgSmF2YSwgUiBTaGlueSwgQmFzaCBTaGVsbCBTY3JpcHQuPC9oND4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMiI+PC92LWNvbD4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgPC92LWNvbD4KICAgICAgPHYtY29sIGNsYXNzPSJ0ZXh0LWNlbnRlciIgY29scz0iMTIiPgogICAgICAgIDxoMSBjbGFzcz0iZGlzcGxheS0xIGZvbnQtd2VpZ2h0LWJvbGQgbWItNCI+VEVDSE5JQ0FMIEFERElUSU9OQUwgU0tJTExTPC9oMT4KICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjIiPjwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9InRleHQtY2VudGVyIiBjb2xzPSI4Ij4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InN1YmhlYWRpbmcgZm9udC13ZWlnaHQtdGhpbiI+QVdTLCBNaWNyb3NvZnQgQXp1cmUsIEZpcmViYXNlKEF1dGgsIEZpcmVzdG9yZSwgUmVhbC1UaW1lIERCLCBDbG91ZCBGdW5jdGlvbnMpLCBHaXQoR2l0SHViLCBCaXRidWNrZXQsIEdpdExhYiksIFNvdXJjZVRyZWUsIE1vbmdEQiwgSGlnaENoYXJ0cywgQ2hhcnRKUywgVW5pdHkzRCwgVlMgQ29kZSwgRG9ja2VyLCBKaXJhLCBDb25mbHVlbmNlLCBUYWJsZWF1LCBMaW51eCwgTWFjIE9TWCwgV2luZG93cy48L2g0PgogICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIyIj48L3YtY29sPgogICAgICAgICAgICA8L3Ytcm93PgogICAgICA8L3YtY29sPgogICAgPC92LXJvdz4KCiAgICA8YnIvPgo8IS0tCiAgICA8di1yb3cgY2xhc3M9IndvcmsiPgogICAgPHYtY29udGFpbmVyIGZsdWlkPgogICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjEyIj4KICAgICAgICA8aDEgY2xhc3M9ImRpc3BsYXktMSBmb250LXdlaWdodC1ib2xkIG1iLTQiPlNvbWUgUmVjZW50IFdvcmtzPC9oMT4KICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMiI+PC92LWNvbD4KICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjgiPgogICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ic3ViaGVhZGluZyBmb250LXdlaWdodC10aGluIj5IZXJlIGFyZSBhIGZldyB3ZWIgYXBwcyBhbmQgd2Vic2l0ZXMgSSd2ZSB3b3JrZWQgb24gcmVjZW50bHkuPC9oND4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMiI+PC92LWNvbD4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICA8L3YtY29sPgogICAgICAgIDx2LXJvdz4KICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICA8di1ob3ZlcgogICAgICAgICAgICAgICAgdi1zbG90OmRlZmF1bHQ9InsgaG92ZXIgfSIKICAgICAgICAgICAgICAgIG9wZW4tZGVsYXk9IjIwMCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1jYXJkIGNvbG9yPSJ3aGl0ZSIgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIgogICAgICAgICAgICBjbGFzcz0ibXgtYXV0byI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgIEFzcGlyYW50ZSBGb3VuZGF0aW9uCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSI+CiAgICAgICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2Vic2l0ZSIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgdi1pZj0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggdHJhbnNpdGlvbi1mYXN0LWluLWZhc3Qtb3V0IGxpbWUgYWNjZW50LTQgdi1jYXJkLS1yZXZlYWwgZGlzcGxheS0zIHdoaXRlLS10ZXh0IgogICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBib3JkZXItcmFkaXVzOiAyMHB4OyIKICAgICAgICAgID4KICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9IiMzRjUxQjUiIGlkPSJkYXRhaG9sZGVyIiBsYXJnZSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbG9naW4iID5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KCiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtaG92ZXIKICAgICAgICAgICAgICAgIHYtc2xvdDpkZWZhdWx0PSJ7IGhvdmVyIH0iCiAgICAgICAgICAgICAgICBvcGVuLWRlbGF5PSIyMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtY2FyZCBjb2xvcj0id2hpdGUiIGlkPSJkYXRhaG9sZGVyIgogICAgICAgICAgICA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIKICAgICAgICAgICAgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICBEaWdpdGFsIEh1YiBBdXN0cmFsaWEKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIj4KICAgICAgICAgICAgICAgICJEZXZlbG9waW5nIHdlYnNpdGUiCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIHYtaWY9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0iZC1mbGV4IHRyYW5zaXRpb24tZmFzdC1pbi1mYXN0LW91dCBsaW1lIGFjY2VudC00IHYtY2FyZC0tcmV2ZWFsIGRpc3BsYXktMyB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMTAwJTsgYm9yZGVyLXJhZGl1czogMjBweDsiCiAgICAgICAgICA+CiAgICAgICAgICA8di1idG4gY2xhc3M9Im1hLTIiIG91dGxpbmVkIGNvbG9yPSIjM0Y1MUI1IiBpZD0iZGF0YWhvbGRlciIgbGFyZ2UgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luIj5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1ob3Zlcj4KICAgICAgICA8L3YtY29sPgoKICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICA8di1ob3ZlcgogICAgICAgICAgICAgICAgdi1zbG90OmRlZmF1bHQ9InsgaG92ZXIgfSIKICAgICAgICAgICAgICAgIG9wZW4tZGVsYXk9IjIwMCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1jYXJkIGNvbG9yPSJ3aGl0ZSIgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIgogICAgICAgICAgICBjbGFzcz0ibXgtYXV0byI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgIE15SW50ZXJhY3QgRGVza3RvcAogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2ViIGFwcCIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgdi1pZj0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggdHJhbnNpdGlvbi1mYXN0LWluLWZhc3Qtb3V0IGxpbWUgYWNjZW50LTQgdi1jYXJkLS1yZXZlYWwgZGlzcGxheS0zIHdoaXRlLS10ZXh0IgogICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBib3JkZXItcmFkaXVzOiAyMHB4OyIKICAgICAgICAgID4KICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9IiMzRjUxQjUiIGlkPSJkYXRhaG9sZGVyIiBsYXJnZSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbG9naW4iPlZpc2l0IFdlYnNpdGU8L3YtYnRuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC92LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgPC92LWhvdmVyPgogICAgICAgIDwvdi1jb2w+CgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIiBtZD0iNCI+CiAgICAgICAgICAgIDx2LWhvdmVyCiAgICAgICAgICAgICAgICB2LXNsb3Q6ZGVmYXVsdD0ieyBob3ZlciB9IgogICAgICAgICAgICAgICAgb3Blbi1kZWxheT0iMjAwIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWNhcmQgY29sb3I9IndoaXRlIiBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiCiAgICAgICAgICAgIGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgVEFMIFByaWNpbmcgRWZmaWNpZW5jeQogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgICAgICJEZXZlbG9waW5nIHdlYiBhcHAiCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIHYtaWY9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0iZC1mbGV4IHRyYW5zaXRpb24tZmFzdC1pbi1mYXN0LW91dCBsaW1lIGFjY2VudC00IHYtY2FyZC0tcmV2ZWFsIGRpc3BsYXktMyB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMTAwJTsgYm9yZGVyLXJhZGl1czogMjBweDsiCiAgICAgICAgICA+CiAgICAgICAgICA8di1idG4gY2xhc3M9Im1hLTIiIG91dGxpbmVkIGNvbG9yPSIjM0Y1MUI1IiBpZD0iZGF0YWhvbGRlciIgbGFyZ2UgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luIj5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KCiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtaG92ZXIKICAgICAgICAgICAgICAgIHYtc2xvdDpkZWZhdWx0PSJ7IGhvdmVyIH0iCiAgICAgICAgICAgICAgICBvcGVuLWRlbGF5PSIyMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtY2FyZCBjb2xvcj0id2hpdGUiIGlkPSJkYXRhaG9sZGVyIgogICAgICAgICAgICA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIKICAgICAgICAgICAgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICBGaXJzdCBTdGF0ZSBTdXBlcgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2ViIGFwcCIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgdi1pZj0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggdHJhbnNpdGlvbi1mYXN0LWluLWZhc3Qtb3V0IGxpbWUgYWNjZW50LTQgdi1jYXJkLS1yZXZlYWwgZGlzcGxheS0zIHdoaXRlLS10ZXh0IgogICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBib3JkZXItcmFkaXVzOiAyMHB4OyIKICAgICAgICAgID4KICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9IiMzRjUxQjUiIGlkPSJkYXRhaG9sZGVyIiBsYXJnZSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbG9naW4iPlZpc2l0IFdlYnNpdGU8L3YtYnRuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC92LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgPC92LWhvdmVyPgogICAgICAgIDwvdi1jb2w+CgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIiBtZD0iNCI+CiAgICAgICAgICAgIDx2LWhvdmVyCiAgICAgICAgICAgICAgICB2LXNsb3Q6ZGVmYXVsdD0ieyBob3ZlciB9IgogICAgICAgICAgICAgICAgb3Blbi1kZWxheT0iMjAwIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWNhcmQgY29sb3I9IndoaXRlIiBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiCiAgICAgICAgICAgIGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgRW50ZXBvb2wgZm9yIFJNUwogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2ViIGFwcCIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgPHYtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIHYtaWY9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0iZC1mbGV4IHRyYW5zaXRpb24tZmFzdC1pbi1mYXN0LW91dCBsaW1lIGFjY2VudC00IHYtY2FyZC0tcmV2ZWFsIGRpc3BsYXktMyB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMTAwJTsgYm9yZGVyLXJhZGl1czogMjBweDsiCiAgICAgICAgICA+CiAgICAgICAgICA8di1idG4gY2xhc3M9Im1hLTIiIG91dGxpbmVkIGNvbG9yPSIjM0Y1MUI1IiBpZD0iZGF0YWhvbGRlciIgbGFyZ2UgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luIj5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1ob3Zlcj4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwvdi1yb3c+CiAgICA8L3YtY29udGFpbmVyPgogICAgPC92LXJvdz4tLT4KCiAgICA8di1yb3cgY2xhc3M9IndvcmsiPgogICAgPHYtY29udGFpbmVyIGZsdWlkPgogICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjEyIj4KICAgICAgICA8aDEgY2xhc3M9ImRpc3BsYXktMSBmb250LXdlaWdodC1ib2xkIG1iLTQiPlNvbWUgUmVjZW50IFdvcmtzPC9oMT4KICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMiI+PC92LWNvbD4KICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIiIGNvbHM9IjgiPgogICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ic3ViaGVhZGluZyBmb250LXdlaWdodC10aGluIj5IZXJlIGFyZSBhIGZldyB3ZWIgYXBwcyBhbmQgd2Vic2l0ZXMgSSd2ZSB3b3JrZWQgb24gcmVjZW50bHkuPC9oND4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMiI+PC92LWNvbD4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICA8L3YtY29sPgogICAgICAgIDx2LXJvdz4KCiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtaG92ZXIKICAgICAgICAgICAgICAgIHYtc2xvdDpkZWZhdWx0PSJ7IGhvdmVyIH0iCiAgICAgICAgICAgICAgICBvcGVuLWRlbGF5PSIyMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtY2FyZCBjb2xvcj0id2hpdGUiIGlkPSJkYXRhaG9sZGVyIgogICAgICAgICAgICA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIKICAgICAgICAgICAgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICBFbXBsb3llciBvZiBSZWNvcmQKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIj4KICAgICAgICAgICAgICAgICJEZXZlbG9waW5nIHdlYiBhcHAiCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgIDx2LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgPGRpdgogICAgICAgICAgICB2LWlmPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9ImQtZmxleCB0cmFuc2l0aW9uLWZhc3QtaW4tZmFzdC1vdXQgbGltZSBhY2NlbnQtNCB2LWNhcmQtLXJldmVhbCBkaXNwbGF5LTMgd2hpdGUtLXRleHQiCiAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDEwMCU7IGJvcmRlci1yYWRpdXM6IDIwcHg7IgogICAgICAgICAgPgogICAgICAgICAgPHYtYnRuIGNsYXNzPSJtYS0yIiBvdXRsaW5lZCBjb2xvcj0iIzNGNTFCNSIgaWQ9ImRhdGFob2xkZXIiIGxhcmdlIGhyZWY9Imh0dHBzOi8vYXBwLmVtZXJodWIuY29tL2xvZ2luIiB0YXJnZXQ9Il9ibGFuayI+VmlzaXQgV2Vic2l0ZTwvdi1idG4+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3YtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KICAgICAgICAKICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICA8di1ob3ZlcgogICAgICAgICAgICAgICAgdi1zbG90OmRlZmF1bHQ9InsgaG92ZXIgfSIKICAgICAgICAgICAgICAgIG9wZW4tZGVsYXk9IjIwMCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1jYXJkIGNvbG9yPSJ3aGl0ZSIgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIgogICAgICAgICAgICBjbGFzcz0ibXgtYXV0byI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgIEFzcGlyYW50ZSBGb3VuZGF0aW9uCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSI+CiAgICAgICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2Vic2l0ZSIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgdi1pZj0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggdHJhbnNpdGlvbi1mYXN0LWluLWZhc3Qtb3V0IGxpbWUgYWNjZW50LTQgdi1jYXJkLS1yZXZlYWwgZGlzcGxheS0zIHdoaXRlLS10ZXh0IgogICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBib3JkZXItcmFkaXVzOiAyMHB4OyIKICAgICAgICAgID4KICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9IiMzRjUxQjUiIGlkPSJkYXRhaG9sZGVyIiBsYXJnZSBocmVmPSJodHRwczovL3d3dy5hc3BpcmFudGVmb3VuZGF0aW9uLm9yZyIgdGFyZ2V0PSJfYmxhbmsiPlZpc2l0IFdlYnNpdGU8L3YtYnRuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC92LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1ob3Zlcj4KICAgICAgICA8L3YtY29sPgoKICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICA8di1ob3ZlcgogICAgICAgICAgICAgICAgdi1zbG90OmRlZmF1bHQ9InsgaG92ZXIgfSIKICAgICAgICAgICAgICAgIG9wZW4tZGVsYXk9IjIwMCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1jYXJkIGNvbG9yPSJ3aGl0ZSIgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIgogICAgICAgICAgICBjbGFzcz0ibXgtYXV0byI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgIERpZ2l0YWwgSHViIEF1c3RyYWxpYQogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2Vic2l0ZSIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgdi1pZj0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggdHJhbnNpdGlvbi1mYXN0LWluLWZhc3Qtb3V0IGxpbWUgYWNjZW50LTQgdi1jYXJkLS1yZXZlYWwgZGlzcGxheS0zIHdoaXRlLS10ZXh0IgogICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBib3JkZXItcmFkaXVzOiAyMHB4OyIKICAgICAgICAgID4KICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9IiMzRjUxQjUiIGlkPSJkYXRhaG9sZGVyIiBsYXJnZSBocmVmPSJodHRwczovL2RpZ2l0YWxodWJhdXN0cmFsaWEuY29tLmF1IiB0YXJnZXQ9Il9ibGFuayI+VmlzaXQgV2Vic2l0ZTwvdi1idG4+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3YtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KCiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtaG92ZXIKICAgICAgICAgICAgICAgIHYtc2xvdDpkZWZhdWx0PSJ7IGhvdmVyIH0iCiAgICAgICAgICAgICAgICBvcGVuLWRlbGF5PSIyMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtY2FyZCBjb2xvcj0id2hpdGUiIGlkPSJkYXRhaG9sZGVyIgogICAgICAgICAgICA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIKICAgICAgICAgICAgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICBNeUludGVyYWN0IERlc2t0b3AKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIj4KICAgICAgICAgICAgICAgICJEZXZlbG9waW5nIHdlYiBhcHAiCiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIHYtaWY9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0iZC1mbGV4IHRyYW5zaXRpb24tZmFzdC1pbi1mYXN0LW91dCBsaW1lIGFjY2VudC00IHYtY2FyZC0tcmV2ZWFsIGRpc3BsYXktMyB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMTAwJTsgYm9yZGVyLXJhZGl1czogMjBweDsiCiAgICAgICAgICA+CiAgICAgICAgICA8di1idG4gY2xhc3M9Im1hLTIiIG91dGxpbmVkIGNvbG9yPSIjM0Y1MUI1IiBpZD0iZGF0YWhvbGRlciIgbGFyZ2UgaHJlZj0iaHR0cHM6Ly9teS5pbnRlcmFjdC50ZWNobm9sb2d5L2ludGVyYWN0LyMvbG9naW4iIHRhcmdldD0iX2JsYW5rIj5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1ob3Zlcj4KICAgICAgICA8L3YtY29sPgoKICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICA8di1ob3ZlcgogICAgICAgICAgICAgICAgdi1zbG90OmRlZmF1bHQ9InsgaG92ZXIgfSIKICAgICAgICAgICAgICAgIG9wZW4tZGVsYXk9IjIwMCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1jYXJkIGNvbG9yPSJ3aGl0ZSIgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIgogICAgICAgICAgICBjbGFzcz0ibXgtYXV0byI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgIFRBTCBQcmljaW5nIEVmZmljaWVuY3kKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImhlYWRsaW5lIj4KICAgICAgICAgICAgICAgICAgICAiRGV2ZWxvcGluZyB3ZWIgYXBwIgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWV4cGFuZC10cmFuc2l0aW9uPgogICAgICAgICAgPGRpdgogICAgICAgICAgICB2LWlmPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9ImQtZmxleCB0cmFuc2l0aW9uLWZhc3QtaW4tZmFzdC1vdXQgbGltZSBhY2NlbnQtNCB2LWNhcmQtLXJldmVhbCBkaXNwbGF5LTMgd2hpdGUtLXRleHQiCiAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDEwMCU7IGJvcmRlci1yYWRpdXM6IDIwcHg7IgogICAgICAgICAgPgogICAgICAgICAgPHYtYnRuIGNsYXNzPSJtYS0yIiBvdXRsaW5lZCBjb2xvcj0iIzNGNTFCNSIgaWQ9ImRhdGFob2xkZXIiIGxhcmdlIGhyZWY9Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MS8iIHRhcmdldD0iX2JsYW5rIj5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KCiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtaG92ZXIKICAgICAgICAgICAgICAgIHYtc2xvdDpkZWZhdWx0PSJ7IGhvdmVyIH0iCiAgICAgICAgICAgICAgICBvcGVuLWRlbGF5PSIyMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtY2FyZCBjb2xvcj0id2hpdGUiIGlkPSJkYXRhaG9sZGVyIgogICAgICAgICAgICA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIKICAgICAgICAgICAgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICBGaXJzdCBTdGF0ZSBTdXBlcgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2ViIGFwcCIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgdi1pZj0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggdHJhbnNpdGlvbi1mYXN0LWluLWZhc3Qtb3V0IGxpbWUgYWNjZW50LTQgdi1jYXJkLS1yZXZlYWwgZGlzcGxheS0zIHdoaXRlLS10ZXh0IgogICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBib3JkZXItcmFkaXVzOiAyMHB4OyIKICAgICAgICAgID4KICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibWEtMiIgb3V0bGluZWQgY29sb3I9IiMzRjUxQjUiIGlkPSJkYXRhaG9sZGVyIiBsYXJnZSBocmVmPSJodHRwOi8vbG9jYWxob3N0OjgwODIvIiB0YXJnZXQ9Il9ibGFuayI+VmlzaXQgV2Vic2l0ZTwvdi1idG4+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3YtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L3YtaG92ZXI+CiAgICAgICAgPC92LWNvbD4KCiAgICAgICAgPCEtLQogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIiBtZD0iNCI+CiAgICAgICAgICAgIDx2LWhvdmVyCiAgICAgICAgICAgICAgICB2LXNsb3Q6ZGVmYXVsdD0ieyBob3ZlciB9IgogICAgICAgICAgICAgICAgb3Blbi1kZWxheT0iMjAwIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWNhcmQgY29sb3I9IndoaXRlIiBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiCiAgICAgICAgICAgIGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgRW50ZXBvb2wgZm9yIFJNUwogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgIkRldmVsb3Bpbmcgd2ViIGFwcCIKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgPHYtZXhwYW5kLXRyYW5zaXRpb24+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIHYtaWY9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0iZC1mbGV4IHRyYW5zaXRpb24tZmFzdC1pbi1mYXN0LW91dCBsaW1lIGFjY2VudC00IHYtY2FyZC0tcmV2ZWFsIGRpc3BsYXktMyB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMTAwJTsgYm9yZGVyLXJhZGl1czogMjBweDsiCiAgICAgICAgICA+CiAgICAgICAgICA8di1idG4gY2xhc3M9Im1hLTIiIG91dGxpbmVkIGNvbG9yPSIjM0Y1MUI1IiBpZD0iZGF0YWhvbGRlciIgbGFyZ2UgaHJlZj0iaHR0cHM6Ly93d3cudWJlci5iaXoiIHRhcmdldD0iX2JsYW5rIj5WaXNpdCBXZWJzaXRlPC92LWJ0bj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1leHBhbmQtdHJhbnNpdGlvbj4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1ob3Zlcj4KICAgICAgICA8L3YtY29sPi0tPgogICAgICAgIDwvdi1yb3c+CiAgICA8L3YtY29udGFpbmVyPgogICAgPC92LXJvdz4KCiAgICA8YnIvPgoKICAgIDx2LXJvdz4KICAgICAgICA8di1jb2wgY2xhc3M9InRleHQtY2VudGVyIiBjb2xzPSIxMiI+CiAgICAgICAgPGgxIGNsYXNzPSJkaXNwbGF5LTEgZm9udC13ZWlnaHQtYm9sZCBtYi00Ij5FRFVDQVRJT04gJiBDQVJFRVI8L2gxPgogICAgPHYtdGltZWxpbmU+CiAgICA8di10aW1lbGluZS1pdGVtCiAgICAgIHYtZm9yPSIoeWVhciwgaSkgaW4geWVhcnMiCiAgICAgIDprZXk9ImkiCiAgICAgIDpjb2xvcj0ieWVhci5jb2xvciIKICAgICAgc21hbGwKICAgID4KICAgICAgPHRlbXBsYXRlIHYtc2xvdDpvcHBvc2l0ZT4KICAgICAgICA8c3BhbgogICAgICAgICAgOmNsYXNzPSJgaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCAke3llYXIuY29sb3J9LS10ZXh0YCIKICAgICAgICAgIHYtdGV4dD0ieWVhci55ZWFyIgogICAgICAgID48L3NwYW4+CiAgICAgIDwvdGVtcGxhdGU+CiAgICAgIDxkaXYgY2xhc3M9InB5LTQiPgogICAgICAgIDxoMiA6Y2xhc3M9ImBoZWFkbGluZSBmb250LXdlaWdodC1saWdodCBtYi00ICR7eWVhci5jb2xvcn0tLXRleHRgIj57e3llYXIubmFtZX19PC9oMj4KICAgICAgICA8ZGl2PgogICAgICAgICAge3t5ZWFyLmRlc2NyaXB0aW9ufX0KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L3YtdGltZWxpbmUtaXRlbT4KICA8L3YtdGltZWxpbmU+Cjwvdi1jb2w+CiAgPC92LXJvdz4KCiAgPGJyLz4KCiAgPHYtcm93IGNsYXNzPSJnb2FsIj4KICAgIDx2LWNvbnRhaW5lciBmbHVpZD4KICAgICAgICA8di1jb2wgY2xhc3M9InRleHQtY2VudGVyIiBjb2xzPSIxMiI+CiAgICAgICAgPGgxIGNsYXNzPSJkaXNwbGF5LTEgZm9udC13ZWlnaHQtYm9sZCBtYi00Ij5DQVJFRVIgR09BTDwvaDE+CiAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjIiPjwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9InRleHQtY2VudGVyIiBjb2xzPSI4Ij4KICAgICAgICAgICAgICAgIDx2LXN0ZXBwZXIgdi1tb2RlbD0iZTEiIGlkPSJkYXRhaG9sZGVyIj4KICAgICAgICAgICAgICAgIDx2LXN0ZXBwZXItaGVhZGVyPgogICAgICAgICAgICAgICAgICA8di1zdGVwcGVyLXN0ZXAgOmNvbXBsZXRlPSJlMSA+IDEiIHN0ZXA9IjEiPkxlYXJuIE5ldyBUZWNobm9sb2d5PC92LXN0ZXBwZXItc3RlcD4KCiAgICAgICAgICAgICAgICAgIDx2LWRpdmlkZXI+PC92LWRpdmlkZXI+CgogICAgICAgICAgICAgICAgICA8di1zdGVwcGVyLXN0ZXAgOmNvbXBsZXRlPSJlMSA+IDIiIHN0ZXA9IjIiPkJlY29tZSBTZW5pb3IgRGV2ZWxvcGVyPC92LXN0ZXBwZXItc3RlcD4KCiAgICAgICAgICAgICAgICA8L3Ytc3RlcHBlci1oZWFkZXI+CgogICAgICAgICAgICAgICAgPHYtc3RlcHBlci1pdGVtcz4KICAgICAgICAgICAgICAgICAgPHYtc3RlcHBlci1jb250ZW50IHN0ZXA9IjEiPgogICAgICAgICAgICAgICAgICAgIDx2LWNhcmQKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtYi0xMiIKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJpbmZvIgogICAgICAgICAgICAgICAgICAgICAgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICBMZWFybiBNb2Rlcm4gVGVjaG5vbG9neQogICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgICJJIGFtIHZlcnkga2VlbiBhbmQgZW50aHVzaWFzdGljIHRvIGxlYXJuIG5ldyB0aGluZ3MuIgogICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+CgogICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImxpbWUgYWNjZW50LTQiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImUxID0gMiIKICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBDb250aW51ZQogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgIDwvdi1zdGVwcGVyLWNvbnRlbnQ+CgogICAgICAgICAgICAgICAgICA8di1zdGVwcGVyLWNvbnRlbnQgc3RlcD0iMiI+CiAgICAgICAgICAgICAgICAgICAgPHYtY2FyZAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1iLTEyIgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImN5YW4iCiAgICAgICAgICAgICAgICAgICAgICBpZD0iZGF0YWhvbGRlciIKICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJoZWFkbGluZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgIEJlY29tZSBTZW5pb3IgRGV2ZWxvcGVyCiAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgICAgIkkgd2FudCB0byBiZWNvbWUgYSBzdWNjZXNzZnVsIFNlbmlvciBEZXZlbG9wZXIuIgogICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+CgogICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImxpbWUgYWNjZW50LTQiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImUxID0gMyIKICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBDb250aW51ZQogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgIDwvdi1zdGVwcGVyLWNvbnRlbnQ+CgogICAgICAgICAgICAgICAgICA8di1zdGVwcGVyLWNvbnRlbnQgc3RlcD0iMyI+CiAgICAgICAgICAgICAgICAgICAgPHYtY2FyZAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1iLTEyIgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iaGVhZGxpbmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICBLZWVwIENvbnRpbnVpbmcgTGVhcm5pbmcKICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAiSSB3YW50IHRvIGtlZXAgY29udGludWluZyBteSBsZWFybmluZyBwcm9jZXNzLiIKICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPgoKICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJsaW1lIGFjY2VudC00IgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJlMSA9IDEiCiAgICAgICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgQ29udGludWUKICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICA8L3Ytc3RlcHBlci1jb250ZW50PgogICAgICAgICAgICAgICAgPC92LXN0ZXBwZXItaXRlbXM+CiAgICAgICAgICAgICAgPC92LXN0ZXBwZXI+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjIiPjwvdi1jb2w+CiAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgPC92LWNvbD4KICAgIDwvdi1jb250YWluZXI+CiAgPC92LXJvdz4KCiAgPHYtZmFiLXRyYW5zaXRpb24+CiAgICAgICAgICA8di1idG4KICAgICAgICAgICAgaWQ9ImRhdGFob2xkZXIiCiAgICAgICAgICAgIHYtc2Nyb2xsPSJvblNjcm9sbCIKICAgICAgICAgICAgdi1zaG93PSJmYWIiCiAgICAgICAgICAgIGZhYgogICAgICAgICAgICBkYXJrCiAgICAgICAgICAgIGZpeGVkCiAgICAgICAgICAgIGJvdHRvbQogICAgICAgICAgICByaWdodAogICAgICAgICAgICBjb2xvcj0ibGltZSBhY2NlbnQtNCIKICAgICAgICAgICAgQGNsaWNrPSJ0b1RvcCIKICAgICAgICAgICAgY2xhc3M9InRyYW5zcGFyZW50IgogICAgICAgICAgPgogICAgICAgICAgICA8di1pY29uPmtleWJvYXJkX2Fycm93X3VwPC92LWljb24+CiAgICAgICAgICA8L3YtYnRuPgogICAgPC92LWZhYi10cmFuc2l0aW9uPgo8L3YtY29udGFpbmVyPgo="},null]}